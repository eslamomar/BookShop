spring.application.name=OnlineBookStore

## Spring DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
## ?? SECURITY NOTE:
## These values are hard-coded here for easy integration in development.
## In production, ALWAYS use environment variables instead of storing credentials in source code.
## Example environment variables to set:
##   DB_URL=jdbc:mysql://localhost:3306/ss
##   DB_USER=bookstore_user
##   DB_PASSWORD=strongSecretPassword
spring.datasource.url=${DB_URL:jdbc:mysql://localhost:3306/ss}
spring.datasource.username=${DB_USER:root}
spring.datasource.password=${DB_PASSWORD:rootroot}

## Hibernate Properties
# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto=update
logging.level.org.springframework.security=TRACE

## Admin Configuration (Override these in production)
## ?? SECURITY NOTE:
## Do NOT hardcode admin credentials. Provide them as environment variables:
##   ADMIN_EMAIL
##   ADMIN_PASSWORD
##   ADMIN_NAME
app.admin.email=${ADMIN_EMAIL:admin@bookstore.com}
app.admin.password=${ADMIN_PASSWORD:Admin123!}
app.admin.name=${ADMIN_NAME:Store Administrator}

## Only create admin user if database is empty
app.init.data.enabled=${INIT_DATA:true}

# Session timeout (shorter is more secure)
server.port=8443
server.ssl.enabled=true
server.ssl.key-store=classpath:keystore/bookstore.p12
server.ssl.key-store-type=PKCS12

## ?? SECURITY NOTE:
## Keystore password must NOT be hardcoded here. Use env variables:
##   KEYSTORE_PASSWORD
##   KEYSTORE_ALIAS
server.ssl.key-store-password=${KEYSTORE_PASSWORD:omarucd}
server.ssl.key-alias=${KEYSTORE_ALIAS:bookstore}

# Cookie security
server.servlet.session.timeout=15m
server.servlet.session.cookie.http-only=true
server.servlet.session.cookie.secure=true
server.servlet.session.cookie.same-site=strict
server.servlet.session.tracking-modes=COOKIE
